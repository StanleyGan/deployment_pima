version: 2.1

defaults: &defaults
  docker:
    - image: circleci/python:3.6.10
  working_directory: ~/project


prepare_venv: &prepare_venv
  run:
    name: Create venv
    command: |
      python3 -m venv venv
      source venv/bin/activate
      pip3 install --upgrade pip


train_model: &train_model
    run:
      name: Install requirements and train model
      command: |
        source venv/bin/activate
        pip3 install -e pima_package/deployment_pima/
        PYTHONPATH=./pima_package/deployment_pima python3 pima_package/deployment_pima/deployment_pima/train_pipeline.py


jobs:
  test_deployment_pima:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - *train_model
      - run:
          name: Running model tests
          command: |
            source venv/bin/activate
            py.test -vv pima_package/deployment_pima/tests


  test_pima_api:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - py-deps-{{ checksum "pima_package/pima_api/requirements.txt" }}
      - *prepare_venv
      - run:
          name: Running api tests
          command: |
            pip3 install -r pima_package/pima_api/requirements.txt
            py.test -vv pima_package/pima_api/tests -m "not differential"
      - save_cache:
          key: py-deps-{{ checksum "pima_package/pima_api/requirements.txt" }}
          paths:
            - "/venv"


  upload_model:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: Publish model to Gemfury
          command: |
            source venv/bin/activate
            pip3 install -r pima_package/deployment_pima/requirements.txt
            PYTHONPATH=./pima_package/deployment_pima python3 pima_package/deployment_pima/deployment_pima/train_pipeline.py
            chmod +x ./scripts/publish_model.sh
            ./scripts/publish_model.sh ./pima_package/deployment_pima/


  differential_tests:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: Capturing previous model predictions for differential testing
          command: |
            source venv/bin/activate
            pip3 install -r pima_package/pima_api/diff_test_requirements.txt
            PYTHONPATH=./pima_package/pima_api python3 pima_package/pima_api/tests/capture_model_predictions.py
            pip3 uninstall -y deployment-pima
      - *train_model
      - run:
          name: Running differential tests
          command: |
            source venv/bin/activate
            py.test -vv pima_package/pima_api/tests -m differential

  heroku_deployment:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

  heroku_build_push_docker:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false   # true can cache layer and save time
      - run:
          name: Docker login
          command: |
            echo "$HEROKU_API_KEY" | docker login --username=$HEROKU_EMAIL --password-stdin registry.heroku.com
      - run:
          name: Setup Heroku CLI
          command: |
            wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run:
          name: Build and Push Image
          command: |
            make build-pima-api-heroku push-pima-api-heroku
      - run:
          name: Release to Heroku
          command: |
            heroku container:release web --app $HEROKU_APP_NAME

  publish_docker_image_to_aws:
    <<: *defaults
    working_directory: ~/project/pima_package/
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Publishing docker image to aws ECR
          command: |
            sudo pip install awscli
            eval $(aws ecr get-login-password --region us-east-2)
            make build-pima-api-aws tag-pima-api push-pima-api-aws
            aws ecs update-service --cluster pima-api-cluster --service pima-api --task-definition pima-api-task-definition:1 --force-new-deployment

workflows:
  version: 2.1
  test-all:
    jobs:
      - test_deployment_pima
      - differential_tests
      - upload_model:
          requires:
            - test_deployment_pima
            - differential_tests
          filters:
            branches:
              only:
                - master
      - test_pima_api:
          requires:
            - test_deployment_pima
            - differential_tests
            - upload_model
          filters:
            branches:
              only:
                - master
      # - heroku_deployment:
      #     requires:
      #       - test_pima_api
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - heroku_build_push_docker:
      #     requires:
      #       - test_pima_api
      #     filters:
      #       branches:
      #         only:
      #           - master
